    import string
    ...
    def test_format_keyword_arguments(self):
        fmt = string.Formatter()
        self.assertEqual(fmt.format("-{arg}-", arg='test'), 'test')
        self.assertRaises(KeyError, fmt.format, "-{arg}-")
        self.assertEqual(fmt.format("-{self}-", self='test'), '-test-')
        self.assertRaises(KeyError, fmt.format, "-{self}-")
        self.assertEqual(fmt.format("-{format_string}-", format_string='test'),
                         '-test-')
        self.assertRaises(KeyError, fmt.format, "-{format_string}-")
        with self.assertRaisesRegex(TypeError, "format_string"):
            fmt.format(format_string="-{arg}-", arg='test')

===

Consider the following test of the Python Standard Library, version 3.10: 

```
    import string
    ...
    def test_format_keyword_arguments(self):
        fmt = string.Formatter()
        self.assertEqual(fmt.format("-{arg}-", arg='test'), 'test')
        self.assertRaises(KeyError, fmt.format, "-{arg}-")
        self.assertEqual(fmt.format("-{self}-", self='test'), '-test-')
        self.assertRaises(KeyError, fmt.format, "-{self}-")
        self.assertEqual(fmt.format("-{format_string}-", format_string='test'),
                         '-test-')
        self.assertRaises(KeyError, fmt.format, "-{format_string}-")
        with self.assertRaisesRegex(TypeError, "format_string"):
            fmt.format(format_string="-{arg}-", arg='test')
```

Your job is to figure out whether this test will pass or fail.
If it fails, provide the rationale.

===

Let's break down the given test code step by step:

1. A new `Formatter` object is created:
    ```python
    fmt = string.Formatter()
    ```

2. The format method of the Formatter object is called with the string "-{arg}-" and the keyword argument `arg='test'`. This should replace `{arg}` with `'test'`:
    ```python
    self.assertEqual(fmt.format("-{arg}-", arg='test'), '-test-')
    ```
    This line should pass.

3. The format method is called again, but this time without the `arg` keyword argument, which should raise a `KeyError`:
    ```python
    self.assertRaises(KeyError, fmt.format, "-{arg}-")
    ```
    This line should pass.

4. The format method is called with the string "-{self}-" and the keyword argument `self='test'`. Since `self` is not a reserved keyword for string formatting, it should replace `{self}` with `'test'`:
    ```python
    self.assertEqual(fmt.format("-{self}-", self='test'), '-test-')
    ```
    This line should pass.

5. The format method is called without the `self` keyword argument, which should raise a `KeyError`:
    ```python
    self.assertRaises(KeyError, fmt.format, "-{self}-")
    ```
    This line should pass.

6. The format method is called with the string "-{format_string}-" and the keyword argument `format_string='test'`. It should replace `{format_string}` with `'test'`:
    ```python
    self.assertEqual(fmt.format("-{format_string}-", format_string='test'),
                     '-test-')
    ```
    This line should pass.

7. The format method is called without the `format_string` keyword argument, which should raise a `KeyError`:
    ```python
    self.assertRaises(KeyError, fmt.format, "-{format_string}-")
    ```
    This line should pass.

8. This line checks for a specific exception message that contains "format_string":
    ```python
    with self.assertRaisesRegex(TypeError, "format_string"):
        fmt.format(format_string="-{arg}-", arg='test')
    ```
    In this scenario, the `format_string` keyword argument is used to specify the format string itself rather than as a replacement field, and `{arg}` is provided as a replacement field. However, this is not the typical way of using the format method, and it is expected to raise a `TypeError`. But, whether the raised `TypeError` message contains the exact word "format_string" is uncertain.

Conclusion:

All the lines should pass except the last one, as the exact content of the exception message is uncertain. If the exception message doesn't contain the word "format_string", then the test will fail at that point.